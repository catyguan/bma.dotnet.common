/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using bmathrift.core;
using bmathrift.core.Collections;
using bmathrift.core.Protocol;
using bmathrift.core.Transport;

namespace bmathrift.sample
{

    public class Hello
    {
        public interface Iface
        {
            void say(string word);
            string name(string title);
            void error(string msg);
            void sleep(int time);
        }

        public class Client : Iface
        {
            public Client(TProtocol prot)
                : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot)
            {
                iprot_ = iprot;
                oprot_ = oprot;
            }

            protected TProtocol iprot_;
            protected TProtocol oprot_;
            protected int seqid_;

            public TProtocol InputProtocol
            {
                get { return iprot_; }
            }
            public TProtocol OutputProtocol
            {
                get { return oprot_; }
            }


            public void say(string word)
            {
                send_say(word);
                recv_say();
            }

            public void send_say(string word)
            {
                oprot_.WriteMessageBegin(new TMessage("say", TMessageType.Call, ++seqid_));
                say_args args = new say_args();
                args.Word = word;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_say()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                say_result result = new say_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                return;
            }

            public string name(string title)
            {
                send_name(title);
                return recv_name();
            }

            public void send_name(string title)
            {
                oprot_.WriteMessageBegin(new TMessage("name", TMessageType.Call, ++seqid_));
                name_args args = new name_args();
                args.Title = title;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public string recv_name()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                name_result result = new name_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "name failed: unknown result");
            }

            public void error(string msg)
            {
                send_error(msg);
                recv_error();
            }

            public void send_error(string msg)
            {
                oprot_.WriteMessageBegin(new TMessage("error", TMessageType.Call, ++seqid_));
                error_args args = new error_args();
                args.Msg = msg;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_error()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                error_result result = new error_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                return;
            }

            public void sleep(int time)
            {
                send_sleep(time);
                recv_sleep();
            }

            public void send_sleep(int time)
            {
                oprot_.WriteMessageBegin(new TMessage("sleep", TMessageType.Call, ++seqid_));
                sleep_args args = new sleep_args();
                args.Time = time;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }

            public void recv_sleep()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                sleep_result result = new sleep_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                return;
            }

        }
        public class Processor : TProcessor
        {
            public Processor(Iface iface)
            {
                iface_ = iface;
                processMap_["say"] = say_Process;
                processMap_["name"] = name_Process;
                processMap_["error"] = error_Process;
                processMap_["sleep"] = sleep_Process;
            }

            protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
            private Iface iface_;
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public bool Process(TProtocol iprot, TProtocol oprot)
            {
                try
                {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null)
                    {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                }
                catch (IOException)
                {
                    return false;
                }
                return true;
            }

            public void say_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                say_args args = new say_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                say_result result = new say_result();
                iface_.say(args.Word);
                oprot.WriteMessageBegin(new TMessage("say", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void name_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                name_args args = new name_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                name_result result = new name_result();
                result.Success = iface_.name(args.Title);
                oprot.WriteMessageBegin(new TMessage("name", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void error_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                error_args args = new error_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                error_result result = new error_result();
                iface_.error(args.Msg);
                oprot.WriteMessageBegin(new TMessage("error", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void sleep_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                sleep_args args = new sleep_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                sleep_result result = new sleep_result();
                iface_.sleep(args.Time);
                oprot.WriteMessageBegin(new TMessage("sleep", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

        }


        [Serializable]
        public partial class say_args : TBase
        {
            private string _word;

            public string Word
            {
                get
                {
                    return _word;
                }
                set
                {
                    __isset.word = true;
                    this._word = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset
            {
                public bool word;
            }

            public say_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Word = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("say_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Word != null && __isset.word)
                {
                    field.Name = "word";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Word);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("say_args(");
                sb.Append("Word: ");
                sb.Append(Word);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class say_result : TBase
        {

            public say_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("say_result");
                oprot.WriteStructBegin(struc);

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("say_result(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class name_args : TBase
        {
            private string _title;

            public string Title
            {
                get
                {
                    return _title;
                }
                set
                {
                    __isset.title = true;
                    this._title = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset
            {
                public bool title;
            }

            public name_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Title = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("name_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Title != null && __isset.title)
                {
                    field.Name = "title";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Title);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("name_args(");
                sb.Append("Title: ");
                sb.Append(Title);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class name_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset
            {
                public bool success;
            }

            public name_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.String)
                            {
                                Success = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("name_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("name_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class error_args : TBase
        {
            private string _msg;

            public string Msg
            {
                get
                {
                    return _msg;
                }
                set
                {
                    __isset.msg = true;
                    this._msg = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset
            {
                public bool msg;
            }

            public error_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                Msg = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("error_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (Msg != null && __isset.msg)
                {
                    field.Name = "msg";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Msg);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("error_args(");
                sb.Append("Msg: ");
                sb.Append(Msg);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class error_result : TBase
        {

            public error_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("error_result");
                oprot.WriteStructBegin(struc);

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("error_result(");
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class sleep_args : TBase
        {
            private int _time;

            public int Time
            {
                get
                {
                    return _time;
                }
                set
                {
                    __isset.time = true;
                    this._time = value;
                }
            }


            public Isset __isset;
            [Serializable]
            public struct Isset
            {
                public bool time;
            }

            public sleep_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I32)
                            {
                                Time = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("sleep_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (__isset.time)
                {
                    field.Name = "time";
                    field.Type = TType.I32;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Time);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("sleep_args(");
                sb.Append("Time: ");
                sb.Append(Time);
                sb.Append(")");
                return sb.ToString();
            }

        }


        [Serializable]
        public partial class sleep_result : TBase
        {

            public sleep_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("sleep_result");
                oprot.WriteStructBegin(struc);

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("sleep_result(");
                sb.Append(")");
                return sb.ToString();
            }

        }

    }

}